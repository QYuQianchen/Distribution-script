"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity
is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int

  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}

type Account {
  """Address of the account"""
  id: ID!
}

input Account_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Account_filter]
  or: [Account_filter]
}

enum Account_orderBy {
  id
}

enum Aggregation_interval {
  hour
  day
}

type Allowance {
  """Address of the account"""
  id: ID!

  """Channels contract address that token allowances are granted to"""
  grantedToChannelsContract: Bytes!

  """mHOPR token allowance granted to channel contract"""
  mHoprAllowance: BigDecimal!

  """wxHOPR token allowance granted to channel contract"""
  wxHoprAllowance: BigDecimal!

  """xHOPR token allowance granted to channel contract"""
  xHoprAllowance: BigDecimal!
}

input Allowance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  grantedToChannelsContract: Bytes
  grantedToChannelsContract_not: Bytes
  grantedToChannelsContract_gt: Bytes
  grantedToChannelsContract_lt: Bytes
  grantedToChannelsContract_gte: Bytes
  grantedToChannelsContract_lte: Bytes
  grantedToChannelsContract_in: [Bytes!]
  grantedToChannelsContract_not_in: [Bytes!]
  grantedToChannelsContract_contains: Bytes
  grantedToChannelsContract_not_contains: Bytes
  mHoprAllowance: BigDecimal
  mHoprAllowance_not: BigDecimal
  mHoprAllowance_gt: BigDecimal
  mHoprAllowance_lt: BigDecimal
  mHoprAllowance_gte: BigDecimal
  mHoprAllowance_lte: BigDecimal
  mHoprAllowance_in: [BigDecimal!]
  mHoprAllowance_not_in: [BigDecimal!]
  wxHoprAllowance: BigDecimal
  wxHoprAllowance_not: BigDecimal
  wxHoprAllowance_gt: BigDecimal
  wxHoprAllowance_lt: BigDecimal
  wxHoprAllowance_gte: BigDecimal
  wxHoprAllowance_lte: BigDecimal
  wxHoprAllowance_in: [BigDecimal!]
  wxHoprAllowance_not_in: [BigDecimal!]
  xHoprAllowance: BigDecimal
  xHoprAllowance_not: BigDecimal
  xHoprAllowance_gt: BigDecimal
  xHoprAllowance_lt: BigDecimal
  xHoprAllowance_gte: BigDecimal
  xHoprAllowance_lte: BigDecimal
  xHoprAllowance_in: [BigDecimal!]
  xHoprAllowance_not_in: [BigDecimal!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Allowance_filter]
  or: [Allowance_filter]
}

enum Allowance_orderBy {
  id
  grantedToChannelsContract
  mHoprAllowance
  wxHoprAllowance
  xHoprAllowance
}

type Balance {
  """Address of the account"""
  id: ID!

  """mHOPR token balance"""
  mHoprBalance: BigDecimal!

  """wxHOPR token balance"""
  wxHoprBalance: BigDecimal!

  """xHOPR token balance"""
  xHoprBalance: BigDecimal!

  """
  Flag to mark the block number where transfer events are completed processed. Not needed for global value
  """
  lastCompletedProcessedBlock: BigInt!
}

input Balance_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  mHoprBalance: BigDecimal
  mHoprBalance_not: BigDecimal
  mHoprBalance_gt: BigDecimal
  mHoprBalance_lt: BigDecimal
  mHoprBalance_gte: BigDecimal
  mHoprBalance_lte: BigDecimal
  mHoprBalance_in: [BigDecimal!]
  mHoprBalance_not_in: [BigDecimal!]
  wxHoprBalance: BigDecimal
  wxHoprBalance_not: BigDecimal
  wxHoprBalance_gt: BigDecimal
  wxHoprBalance_lt: BigDecimal
  wxHoprBalance_gte: BigDecimal
  wxHoprBalance_lte: BigDecimal
  wxHoprBalance_in: [BigDecimal!]
  wxHoprBalance_not_in: [BigDecimal!]
  xHoprBalance: BigDecimal
  xHoprBalance_not: BigDecimal
  xHoprBalance_gt: BigDecimal
  xHoprBalance_lt: BigDecimal
  xHoprBalance_gte: BigDecimal
  xHoprBalance_lte: BigDecimal
  xHoprBalance_in: [BigDecimal!]
  xHoprBalance_not_in: [BigDecimal!]
  lastCompletedProcessedBlock: BigInt
  lastCompletedProcessedBlock_not: BigInt
  lastCompletedProcessedBlock_gt: BigInt
  lastCompletedProcessedBlock_lt: BigInt
  lastCompletedProcessedBlock_gte: BigInt
  lastCompletedProcessedBlock_lte: BigInt
  lastCompletedProcessedBlock_in: [BigInt!]
  lastCompletedProcessedBlock_not_in: [BigInt!]

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Balance_filter]
  or: [Balance_filter]
}

enum Balance_orderBy {
  id
  mHoprBalance
  wxHoprBalance
  xHoprBalance
  lastCompletedProcessedBlock
}

scalar BigDecimal

scalar BigInt

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

input BlockChangedFilter {
  number_gte: Int!
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

type ModuleNodePair {
  """id: moduleAddress-nodeAddress"""
  id: ID!
  module: NodeManagementModule!
  node: Account!
}

input ModuleNodePair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  module: String
  module_not: String
  module_gt: String
  module_lt: String
  module_gte: String
  module_lte: String
  module_in: [String!]
  module_not_in: [String!]
  module_contains: String
  module_contains_nocase: String
  module_not_contains: String
  module_not_contains_nocase: String
  module_starts_with: String
  module_starts_with_nocase: String
  module_not_starts_with: String
  module_not_starts_with_nocase: String
  module_ends_with: String
  module_ends_with_nocase: String
  module_not_ends_with: String
  module_not_ends_with_nocase: String
  module_: NodeManagementModule_filter
  node: String
  node_not: String
  node_gt: String
  node_lt: String
  node_gte: String
  node_lte: String
  node_in: [String!]
  node_not_in: [String!]
  node_contains: String
  node_contains_nocase: String
  node_not_contains: String
  node_not_contains_nocase: String
  node_starts_with: String
  node_starts_with_nocase: String
  node_not_starts_with: String
  node_not_starts_with_nocase: String
  node_ends_with: String
  node_ends_with_nocase: String
  node_not_ends_with: String
  node_not_ends_with_nocase: String
  node_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ModuleNodePair_filter]
  or: [ModuleNodePair_filter]
}

enum ModuleNodePair_orderBy {
  id
  module
  module__id
  module__implementation
  module__multiSend
  node
  node__id
}

type NetworkRegistration {
  """id: nodeAddress-safeAddres"""
  id: ID!
  safe: Safe!
  node: Account!
}

input NetworkRegistration_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  safe: String
  safe_not: String
  safe_gt: String
  safe_lt: String
  safe_gte: String
  safe_lte: String
  safe_in: [String!]
  safe_not_in: [String!]
  safe_contains: String
  safe_contains_nocase: String
  safe_not_contains: String
  safe_not_contains_nocase: String
  safe_starts_with: String
  safe_starts_with_nocase: String
  safe_not_starts_with: String
  safe_not_starts_with_nocase: String
  safe_ends_with: String
  safe_ends_with_nocase: String
  safe_not_ends_with: String
  safe_not_ends_with_nocase: String
  safe_: Safe_filter
  node: String
  node_not: String
  node_gt: String
  node_lt: String
  node_gte: String
  node_lte: String
  node_in: [String!]
  node_not_in: [String!]
  node_contains: String
  node_contains_nocase: String
  node_not_contains: String
  node_not_contains_nocase: String
  node_starts_with: String
  node_starts_with_nocase: String
  node_not_starts_with: String
  node_not_starts_with_nocase: String
  node_ends_with: String
  node_ends_with_nocase: String
  node_not_ends_with: String
  node_not_ends_with_nocase: String
  node_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NetworkRegistration_filter]
  or: [NetworkRegistration_filter]
}

enum NetworkRegistration_orderBy {
  id
  safe
  safe__id
  safe__threshold
  safe__isCreatedByNodeStakeFactory
  safe__isEligibleOnNetworkRegistry
  node
  node__id
}

type NodeManagementModule {
  id: ID!

  """Address of the implementation"""
  implementation: Bytes!

  """Address of the module target"""
  target: Safe!

  """Address of the multisend contract"""
  multiSend: Bytes!

  """Nodes that are included to the node management module"""
  includedNodes(skip: Int = 0, first: Int = 100, orderBy: ModuleNodePair_orderBy, orderDirection: OrderDirection, where: ModuleNodePair_filter): [ModuleNodePair!]!
}

input NodeManagementModule_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  implementation: Bytes
  implementation_not: Bytes
  implementation_gt: Bytes
  implementation_lt: Bytes
  implementation_gte: Bytes
  implementation_lte: Bytes
  implementation_in: [Bytes!]
  implementation_not_in: [Bytes!]
  implementation_contains: Bytes
  implementation_not_contains: Bytes
  target: String
  target_not: String
  target_gt: String
  target_lt: String
  target_gte: String
  target_lte: String
  target_in: [String!]
  target_not_in: [String!]
  target_contains: String
  target_contains_nocase: String
  target_not_contains: String
  target_not_contains_nocase: String
  target_starts_with: String
  target_starts_with_nocase: String
  target_not_starts_with: String
  target_not_starts_with_nocase: String
  target_ends_with: String
  target_ends_with_nocase: String
  target_not_ends_with: String
  target_not_ends_with_nocase: String
  target_: Safe_filter
  multiSend: Bytes
  multiSend_not: Bytes
  multiSend_gt: Bytes
  multiSend_lt: Bytes
  multiSend_gte: Bytes
  multiSend_lte: Bytes
  multiSend_in: [Bytes!]
  multiSend_not_in: [Bytes!]
  multiSend_contains: Bytes
  multiSend_not_contains: Bytes
  includedNodes_: ModuleNodePair_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NodeManagementModule_filter]
  or: [NodeManagementModule_filter]
}

enum NodeManagementModule_orderBy {
  id
  implementation
  target
  target__id
  target__threshold
  target__isCreatedByNodeStakeFactory
  target__isEligibleOnNetworkRegistry
  multiSend
  includedNodes
}

type NodeSafeRegistration {
  """id: nodeAddress-safeAddres"""
  id: ID!
  safe: Safe!
  node: Account!
}

input NodeSafeRegistration_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  safe: String
  safe_not: String
  safe_gt: String
  safe_lt: String
  safe_gte: String
  safe_lte: String
  safe_in: [String!]
  safe_not_in: [String!]
  safe_contains: String
  safe_contains_nocase: String
  safe_not_contains: String
  safe_not_contains_nocase: String
  safe_starts_with: String
  safe_starts_with_nocase: String
  safe_not_starts_with: String
  safe_not_starts_with_nocase: String
  safe_ends_with: String
  safe_ends_with_nocase: String
  safe_not_ends_with: String
  safe_not_ends_with_nocase: String
  safe_: Safe_filter
  node: String
  node_not: String
  node_gt: String
  node_lt: String
  node_gte: String
  node_lte: String
  node_in: [String!]
  node_not_in: [String!]
  node_contains: String
  node_contains_nocase: String
  node_not_contains: String
  node_not_contains_nocase: String
  node_starts_with: String
  node_starts_with_nocase: String
  node_not_starts_with: String
  node_not_starts_with_nocase: String
  node_ends_with: String
  node_ends_with_nocase: String
  node_not_ends_with: String
  node_not_ends_with_nocase: String
  node_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [NodeSafeRegistration_filter]
  or: [NodeSafeRegistration_filter]
}

enum NodeSafeRegistration_orderBy {
  id
  safe
  safe__id
  safe__threshold
  safe__isCreatedByNodeStakeFactory
  safe__isEligibleOnNetworkRegistry
  node
  node__id
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  balance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Balance
  balances(
    skip: Int = 0
    first: Int = 100
    orderBy: Balance_orderBy
    orderDirection: OrderDirection
    where: Balance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Balance!]!
  allowance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Allowance
  allowances(
    skip: Int = 0
    first: Int = 100
    orderBy: Allowance_orderBy
    orderDirection: OrderDirection
    where: Allowance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Allowance!]!
  safe(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Safe
  safes(
    skip: Int = 0
    first: Int = 100
    orderBy: Safe_orderBy
    orderDirection: OrderDirection
    where: Safe_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Safe!]!
  safeOwnerPair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SafeOwnerPair
  safeOwnerPairs(
    skip: Int = 0
    first: Int = 100
    orderBy: SafeOwnerPair_orderBy
    orderDirection: OrderDirection
    where: SafeOwnerPair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SafeOwnerPair!]!
  safeModulePair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SafeModulePair
  safeModulePairs(
    skip: Int = 0
    first: Int = 100
    orderBy: SafeModulePair_orderBy
    orderDirection: OrderDirection
    where: SafeModulePair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SafeModulePair!]!
  nodeManagementModule(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NodeManagementModule
  nodeManagementModules(
    skip: Int = 0
    first: Int = 100
    orderBy: NodeManagementModule_orderBy
    orderDirection: OrderDirection
    where: NodeManagementModule_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NodeManagementModule!]!
  moduleNodePair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ModuleNodePair
  moduleNodePairs(
    skip: Int = 0
    first: Int = 100
    orderBy: ModuleNodePair_orderBy
    orderDirection: OrderDirection
    where: ModuleNodePair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ModuleNodePair!]!
  account(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  nodeSafeRegistration(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NodeSafeRegistration
  nodeSafeRegistrations(
    skip: Int = 0
    first: Int = 100
    orderBy: NodeSafeRegistration_orderBy
    orderDirection: OrderDirection
    where: NodeSafeRegistration_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NodeSafeRegistration!]!
  networkRegistration(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NetworkRegistration
  networkRegistrations(
    skip: Int = 0
    first: Int = 100
    orderBy: NetworkRegistration_orderBy
    orderDirection: OrderDirection
    where: NetworkRegistration_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NetworkRegistration!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Safe {
  """Address of the Safe; safeAddress: Bytes!"""
  id: ID!

  """Token balances"""
  balance: Balance!

  """Allowance of transferring tokens granted to Channel contract"""
  allowance: Allowance!

  """Threshold of the multisig"""
  threshold: BigInt!

  """Array of owner addresses"""
  owners(skip: Int = 0, first: Int = 100, orderBy: SafeOwnerPair_orderBy, orderDirection: OrderDirection, where: SafeOwnerPair_filter): [SafeOwnerPair!]!

  """Array of node management modules that targets to the current safe"""
  targetedModules(skip: Int = 0, first: Int = 100, orderBy: NodeManagementModule_orderBy, orderDirection: OrderDirection, where: NodeManagementModule_filter): [NodeManagementModule!]!

  """
  Array of all the modules (not necessarily node management module) that are enabled
  """
  addedModules(skip: Int = 0, first: Int = 100, orderBy: SafeModulePair_orderBy, orderDirection: OrderDirection, where: SafeModulePair_filter): [SafeModulePair!]!

  """Flag for the place of creation of Safe"""
  isCreatedByNodeStakeFactory: Boolean!

  """Flag for the eligibility of safe"""
  isEligibleOnNetworkRegistry: Boolean!

  """Nodes associated with the safe on NodeSafeRegistry"""
  registeredNodesInSafeRegistry(skip: Int = 0, first: Int = 100, orderBy: NodeSafeRegistration_orderBy, orderDirection: OrderDirection, where: NodeSafeRegistration_filter): [NodeSafeRegistration!]!

  """Nodes associated with the safe on NetworkRegistry"""
  registeredNodesInNetworkRegistry(skip: Int = 0, first: Int = 100, orderBy: NetworkRegistration_orderBy, orderDirection: OrderDirection, where: NetworkRegistration_filter): [NetworkRegistration!]!
}

input Safe_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  balance: String
  balance_not: String
  balance_gt: String
  balance_lt: String
  balance_gte: String
  balance_lte: String
  balance_in: [String!]
  balance_not_in: [String!]
  balance_contains: String
  balance_contains_nocase: String
  balance_not_contains: String
  balance_not_contains_nocase: String
  balance_starts_with: String
  balance_starts_with_nocase: String
  balance_not_starts_with: String
  balance_not_starts_with_nocase: String
  balance_ends_with: String
  balance_ends_with_nocase: String
  balance_not_ends_with: String
  balance_not_ends_with_nocase: String
  balance_: Balance_filter
  allowance: String
  allowance_not: String
  allowance_gt: String
  allowance_lt: String
  allowance_gte: String
  allowance_lte: String
  allowance_in: [String!]
  allowance_not_in: [String!]
  allowance_contains: String
  allowance_contains_nocase: String
  allowance_not_contains: String
  allowance_not_contains_nocase: String
  allowance_starts_with: String
  allowance_starts_with_nocase: String
  allowance_not_starts_with: String
  allowance_not_starts_with_nocase: String
  allowance_ends_with: String
  allowance_ends_with_nocase: String
  allowance_not_ends_with: String
  allowance_not_ends_with_nocase: String
  allowance_: Allowance_filter
  threshold: BigInt
  threshold_not: BigInt
  threshold_gt: BigInt
  threshold_lt: BigInt
  threshold_gte: BigInt
  threshold_lte: BigInt
  threshold_in: [BigInt!]
  threshold_not_in: [BigInt!]
  owners_: SafeOwnerPair_filter
  targetedModules_: NodeManagementModule_filter
  addedModules_: SafeModulePair_filter
  isCreatedByNodeStakeFactory: Boolean
  isCreatedByNodeStakeFactory_not: Boolean
  isCreatedByNodeStakeFactory_in: [Boolean!]
  isCreatedByNodeStakeFactory_not_in: [Boolean!]
  isEligibleOnNetworkRegistry: Boolean
  isEligibleOnNetworkRegistry_not: Boolean
  isEligibleOnNetworkRegistry_in: [Boolean!]
  isEligibleOnNetworkRegistry_not_in: [Boolean!]
  registeredNodesInSafeRegistry_: NodeSafeRegistration_filter
  registeredNodesInNetworkRegistry_: NetworkRegistration_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Safe_filter]
  or: [Safe_filter]
}

enum Safe_orderBy {
  id
  balance
  balance__id
  balance__mHoprBalance
  balance__wxHoprBalance
  balance__xHoprBalance
  balance__lastCompletedProcessedBlock
  allowance
  allowance__id
  allowance__grantedToChannelsContract
  allowance__mHoprAllowance
  allowance__wxHoprAllowance
  allowance__xHoprAllowance
  threshold
  owners
  targetedModules
  addedModules
  isCreatedByNodeStakeFactory
  isEligibleOnNetworkRegistry
  registeredNodesInSafeRegistry
  registeredNodesInNetworkRegistry
}

type SafeModulePair {
  """id: safeAddress-moduleAddress"""
  id: ID!
  safe: Safe!
  module: Account!
}

input SafeModulePair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  safe: String
  safe_not: String
  safe_gt: String
  safe_lt: String
  safe_gte: String
  safe_lte: String
  safe_in: [String!]
  safe_not_in: [String!]
  safe_contains: String
  safe_contains_nocase: String
  safe_not_contains: String
  safe_not_contains_nocase: String
  safe_starts_with: String
  safe_starts_with_nocase: String
  safe_not_starts_with: String
  safe_not_starts_with_nocase: String
  safe_ends_with: String
  safe_ends_with_nocase: String
  safe_not_ends_with: String
  safe_not_ends_with_nocase: String
  safe_: Safe_filter
  module: String
  module_not: String
  module_gt: String
  module_lt: String
  module_gte: String
  module_lte: String
  module_in: [String!]
  module_not_in: [String!]
  module_contains: String
  module_contains_nocase: String
  module_not_contains: String
  module_not_contains_nocase: String
  module_starts_with: String
  module_starts_with_nocase: String
  module_not_starts_with: String
  module_not_starts_with_nocase: String
  module_ends_with: String
  module_ends_with_nocase: String
  module_not_ends_with: String
  module_not_ends_with_nocase: String
  module_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SafeModulePair_filter]
  or: [SafeModulePair_filter]
}

enum SafeModulePair_orderBy {
  id
  safe
  safe__id
  safe__threshold
  safe__isCreatedByNodeStakeFactory
  safe__isEligibleOnNetworkRegistry
  module
  module__id
}

type SafeOwnerPair {
  """id: safeAddress-ownerAddress"""
  id: ID!
  safe: Safe!
  owner: Account!
}

input SafeOwnerPair_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  safe: String
  safe_not: String
  safe_gt: String
  safe_lt: String
  safe_gte: String
  safe_lte: String
  safe_in: [String!]
  safe_not_in: [String!]
  safe_contains: String
  safe_contains_nocase: String
  safe_not_contains: String
  safe_not_contains_nocase: String
  safe_starts_with: String
  safe_starts_with_nocase: String
  safe_not_starts_with: String
  safe_not_starts_with_nocase: String
  safe_ends_with: String
  safe_ends_with_nocase: String
  safe_not_ends_with: String
  safe_not_ends_with_nocase: String
  safe_: Safe_filter
  owner: String
  owner_not: String
  owner_gt: String
  owner_lt: String
  owner_gte: String
  owner_lte: String
  owner_in: [String!]
  owner_not_in: [String!]
  owner_contains: String
  owner_contains_nocase: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_: Account_filter

  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SafeOwnerPair_filter]
  or: [SafeOwnerPair_filter]
}

enum SafeOwnerPair_orderBy {
  id
  safe
  safe__id
  safe__threshold
  safe__isCreatedByNodeStakeFactory
  safe__isEligibleOnNetworkRegistry
  owner
  owner__id
}

type Subscription {
  balance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Balance
  balances(
    skip: Int = 0
    first: Int = 100
    orderBy: Balance_orderBy
    orderDirection: OrderDirection
    where: Balance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Balance!]!
  allowance(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Allowance
  allowances(
    skip: Int = 0
    first: Int = 100
    orderBy: Allowance_orderBy
    orderDirection: OrderDirection
    where: Allowance_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Allowance!]!
  safe(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Safe
  safes(
    skip: Int = 0
    first: Int = 100
    orderBy: Safe_orderBy
    orderDirection: OrderDirection
    where: Safe_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Safe!]!
  safeOwnerPair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SafeOwnerPair
  safeOwnerPairs(
    skip: Int = 0
    first: Int = 100
    orderBy: SafeOwnerPair_orderBy
    orderDirection: OrderDirection
    where: SafeOwnerPair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SafeOwnerPair!]!
  safeModulePair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SafeModulePair
  safeModulePairs(
    skip: Int = 0
    first: Int = 100
    orderBy: SafeModulePair_orderBy
    orderDirection: OrderDirection
    where: SafeModulePair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [SafeModulePair!]!
  nodeManagementModule(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NodeManagementModule
  nodeManagementModules(
    skip: Int = 0
    first: Int = 100
    orderBy: NodeManagementModule_orderBy
    orderDirection: OrderDirection
    where: NodeManagementModule_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NodeManagementModule!]!
  moduleNodePair(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ModuleNodePair
  moduleNodePairs(
    skip: Int = 0
    first: Int = 100
    orderBy: ModuleNodePair_orderBy
    orderDirection: OrderDirection
    where: ModuleNodePair_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [ModuleNodePair!]!
  account(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accounts(
    skip: Int = 0
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    where: Account_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Account!]!
  nodeSafeRegistration(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NodeSafeRegistration
  nodeSafeRegistrations(
    skip: Int = 0
    first: Int = 100
    orderBy: NodeSafeRegistration_orderBy
    orderDirection: OrderDirection
    where: NodeSafeRegistration_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NodeSafeRegistration!]!
  networkRegistration(
    id: ID!

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): NetworkRegistration
  networkRegistrations(
    skip: Int = 0
    first: Int = 100
    orderBy: NetworkRegistration_orderBy
    orderDirection: OrderDirection
    where: NetworkRegistration_filter

    """
    The block at which the query should be executed. Can either be a `{ hash:
    Bytes }` value containing a block hash, a `{ number: Int }` containing the
    block number, or a `{ number_gte: Int }` containing the minimum block
    number. In the case of `number_gte`, the query will be executed on the
    latest block only if the subgraph has progressed to or past the minimum
    block number. Defaults to the latest block when omitted.
    """
    block: Block_height

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [NetworkRegistration!]!

  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

